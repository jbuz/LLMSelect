name: CI

on:
  push:
    branches: [ main, 'copilot/**' ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  pull-requests: write

jobs:
  lint-python:
    name: Lint Python
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Set up Python
        uses: actions/setup-python@65d7f2d534ac1bc67fcd62888c5f4f3d2cb2b236 # v4.7.1
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black

      - name: Check code formatting with Black
        run: black --check --diff llmselect tests

      - name: Lint with flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 llmselect tests --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings
          flake8 llmselect tests --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics

  lint-javascript:
    name: Lint JavaScript
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Set up Node.js
        uses: actions/setup-node@8f152de45cc393bb48ce5d89d36b731f54556e65 # v4.0.0
        with:
          node-version: '16'

      - name: Install dependencies
        run: npm ci

      - name: Lint JavaScript
        run: npm run lint || echo "::warning::No lint script found in package.json"

  test-python:
    name: Test Python
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    steps:
      - name: Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@65d7f2d534ac1bc67fcd62888c5f4f3d2cb2b236 # v4.7.1
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run tests with coverage
        run: |
          pytest tests/ -v --cov=llmselect --cov-report=xml --cov-report=term

      - name: Upload coverage to artifact
        if: matrix.python-version == '3.9'
        uses: actions/upload-artifact@a8a3f3ad30e3422c9c7b888a15615d19a852ae32 # v3.1.3
        with:
          name: coverage-report
          path: coverage.xml
          retention-days: 7

  test-javascript:
    name: Test JavaScript
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Set up Node.js
        uses: actions/setup-node@8f152de45cc393bb48ce5d89d36b731f54556e65 # v4.0.0
        with:
          node-version: '16'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test || echo "::warning::No test script found or tests failed"

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [lint-python, lint-javascript]
    steps:
      - name: Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Set up Python
        uses: actions/setup-python@65d7f2d534ac1bc67fcd62888c5f4f3d2cb2b236 # v4.7.1
        with:
          python-version: '3.9'

      - name: Set up Node.js
        uses: actions/setup-node@8f152de45cc393bb48ce5d89d36b731f54556e65 # v4.0.0
        with:
          node-version: '16'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install Node dependencies
        run: npm ci

      - name: Build frontend
        run: npm run build

      - name: Verify build artifacts
        run: |
          if [ ! -d "dist" ]; then
            echo "::error::Build failed - dist directory not created"
            exit 1
          fi
          echo "Build successful!"

      - name: Upload build artifacts
        uses: actions/upload-artifact@a8a3f3ad30e3422c9c7b888a15615d19a852ae32 # v3.1.3
        with:
          name: build-artifacts
          path: dist/
          retention-days: 7

  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test-python, build]
    if: github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Build Docker image
        run: |
          docker build -t llmselect:${{ github.sha }} .
          docker images

      - name: Test Docker image
        run: |
          # Test that the image can start
          docker run --rm -d --name test-llmselect \
            -e SECRET_KEY=test-key \
            -e JWT_SECRET_KEY=test-jwt \
            -e ENCRYPTION_KEY=$(python -c "from cryptography.fernet import Fernet; print(Fernet.generate_key().decode())") \
            llmselect:${{ github.sha }}
          
          # Wait for startup
          sleep 5
          
          # Check health endpoint
          docker exec test-llmselect curl -f http://localhost:3044/health || exit 1
          
          # Cleanup
          docker stop test-llmselect

  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [lint-python, lint-javascript, test-python, test-javascript, build, docker-build]
    if: always()
    steps:
      - name: Check CI status
        run: |
          echo "### CI Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Lint Python: ${{ needs.lint-python.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Lint JavaScript: ${{ needs.lint-javascript.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Test Python: ${{ needs.test-python.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Test JavaScript: ${{ needs.test-javascript.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Build: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Docker Build: ${{ needs.docker-build.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.lint-python.result }}" != "success" ] || \
             [ "${{ needs.test-python.result }}" != "success" ] || \
             [ "${{ needs.build.result }}" != "success" ]; then
            echo "::error::CI checks failed! Review the logs above."
            exit 1
          fi
